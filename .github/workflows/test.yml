name: GitHub Classroom Workflow

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  TZ: Asia/Shanghai # 设置时区

jobs:
  initialize:
    name: Initialize Submodules and Check for Experiments
    runs-on: ubuntu-latest
    outputs:
      run_rustlings: ${{ steps.check.outputs.run_rustlings }}
      run_cxx: ${{ steps.check.outputs.run_cxx }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive # 初始化和更新子模块
    - name: Check for Rustlings and C++ Experiments
      id: check
      run: |
        if [ -d "rustlings" ]; then
          echo "::set-output name=run_rustlings::true"
        else
          echo "::set-output name=run_rustlings::false"
        fi
        if [ -d "learning-cxx" ]; then
          echo "::set-output name=run_cxx::true"
        else
          echo "::set-output name=run_cxx::false"
        fi

  rustlings:
    name: Rustlings Autograding
    needs: initialize
    if: ${{ needs.initialize.outputs.run_rustlings == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      details: ${{ steps.autograding.outputs.details }}
      points: ${{ steps.autograding.outputs.points}}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'
    - name: Set up Rust environment
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Install rustlings
      run: |
        cargo install --force rustlings
        rustlings --version
    - name: Copy exercises directory to project root
      run: cp -r rustlings/exercises .
    - name: Run tests for rustlings
      run: cargo test --test cicv --verbose
      continue-on-error: true
    - uses: yfblock/os-autograding@master
      id: autograding
      with:
        outputFile: .github/result/rust_result.json
    - name: Generate summary JSON for Rustlings
      run: |
        outfile=".github/result/rust_result.json"
        summary_file=".github/result/rustlings_summary.json"

        # 提取需要的值
        total_exercations=$(jq '.statistics.total_exercations' $outfile)
        total_succeeds=$(jq '.statistics.total_succeeds' $outfile)
        github_user="${{ github.actor }}"

        # 生成新的 JSON 内容
        new_json=$(jq -n \
          --arg channel "github" \
          --argjson courseId 1698 \
          --arg ext "aaa" \
          --arg name "$github_user" \
          --argjson score "$total_succeeds" \
          --argjson totalScore "$total_exercations" \
          '{channel: $channel, courseId: $courseId, ext: $ext, name: $name, score: $score, totalScore: $totalScore}')

        # 保存新的 JSON 文件
        echo "$new_json" > $summary_file

        # 打印新的 JSON 文件到终端
        cat $summary_file

    - name: Post summary JSON to remote API
      run: |
        summary_file=".github/result/rustlings_summary.json"

        # 发送 POST 请求
        curl -X POST "https://api.learningcamp.cn/web/api/courseRank/createByThird" \
          -H "accept: application/json;charset=utf-8" \
          -H "Content-Type: application/json" \
          -d "$(cat $summary_file)" \
          -v

  cxx:
    name: C++ Autograding
    needs: initialize
    if: ${{ needs.initialize.outputs.run_cxx == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      details: ${{ steps.autograding.outputs.details }}
      points: ${{ steps.autograding.outputs.points}}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'true'
    - name: Install xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: latest
    - name: Run tests and save output
      run: |
        result_output="$(xmake run summary)"
          echo "Test results output:"
          echo "$result_output"

          # Initialize JSON data
          json_data='['

          # Initialize variables
          total_exercises=0
          total_succeeds=0
          total_failures=0

          # Process each line of output
          IFS=$'\n'
          for line in $result_output; do
            if [[ "$line" == *"testing"* ]]; then
              current_test=$(echo "$line" | grep -oP 'exercise[0-9]+')
            elif [[ "$line" == *"passed"* ]]; then
              json_data+='{ "name": "'"$current_test"'", "result": true },'
              total_succeeds=$((total_succeeds + 1))
              total_exercises=$((total_exercises + 1))
            elif [[ "$line" == *"failed"* ]]; then
              json_data+='{ "name": "'"$current_test"'", "result": false },'
              total_failures=$((total_failures + 1))
              total_exercises=$((total_exercises + 1))
            fi
          done

          # Remove the last comma
          json_data="${json_data%,}"

          json_data+='],
            "user_name": null,
            "statistics": {
              "total_exercations": '$total_exercises',
              "total_succeeds": '$total_succeeds',
              "total_failures": '$total_failures',
              "total_time": 3
            }
          }'

          # Write JSON file
          echo "$json_data" > ./../.github/result/cxx_result.json

          cat ./../.github/result/cxx_result.json
      working-directory: learning-cxx
      continue-on-error: true
    - uses: yfblock/os-autograding@master
      id: autograding
      with:
        outputFile: .github/result/cxx_result.json
    - name: Generate summary JSON for CXX
      run: |
        outfile=".github/result/cxx_result.json"
        summary_file=".github/result/cxx_summary.json"

        # 提取需要的值
        total_exercations=$(jq '.statistics.total_exercations' $outfile)
        total_succeeds=$(jq '.statistics.total_succeeds' $outfile)
        cxx_user="${{ github.actor }}"

        # 生成新的 JSON 内容
        new_json=$(jq -n \
          --arg channel "github" \
          --argjson courseId 1698 \
          --arg ext "aaa" \
          --arg name "$cxx_user" \
          --argjson score "$total_succeeds" \
          --argjson totalScore "$total_exercations" \
          '{channel: $channel, courseId: $courseId, ext: $ext, name: $name, score: $score, totalScore: $totalScore}')
          
        # 保存新的 JSON 文件
        echo "$new_json" > $summary_file

        # 打印新的 JSON 文件到终端
        cat $summary_file

    - name: Post summary JSON to remote API
      run: |
        summary_file=".github/result/cxx_summary.json"

        # 发送 POST 请求
        curl -X POST "https://api.learningcamp.cn/web/api/courseRank/createByThird" \
          -H "accept: application/json;charset=utf-8" \
          -H "Content-Type: application/json" \
          -d "$(cat $summary_file)" \
          -v
