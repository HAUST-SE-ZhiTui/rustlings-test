name: GitHub Classroom Workflow

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  TZ: Asia/Shanghai # 设置时区
  RUSTFLAGS: -Awarnings

jobs:
  initialize:
    name: Initialize Submodules and Check for Experiments
    runs-on: ubuntu-latest
    outputs:
      run_rustlings: ${{ steps.check.outputs.run_rustlings }}
      run_cxx: ${{ steps.check.outputs.run_cxx }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive # 初始化和更新子模块
    - name: Check for Rustlings and C++ Experiments
      id: check
      run: |
        if [ -d "rustlings" ]; then
          echo "::set-output name=run_rustlings::true"
        else
          echo "::set-output name=run_rustlings::false"
        fi
        if [ -d "learning-cxx" ]; then
          echo "::set-output name=run_cxx::true"
        else
          echo "::set-output name=run_cxx::false"
        fi

  rustlings:
    name: Rustlings Autograding
    needs: initialize
    if: ${{ needs.initialize.outputs.run_rustlings == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'
    - name: Set up Rust environment
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Install rustlings
      run: |
        cargo install --force rustlings
        rustlings --version
    - name: Copy exercises directory to project root
      run: cp -r rustlings/exercises .
    - name: Run tests for rustlings
      run: cargo test --test cicv --verbose
      continue-on-error: true
    - uses: yfblock/os-autograding@master
      id: autograding
      with:
        outputFile: .github/result/rust_result.json
    - name: Generate summary JSON for Rustlings
      run: |
        outfile=".github/result/rust_result.json"
        summary_file=".github/result/rustlings_summary.json"

        # 提取需要的值
        total_exercations=$(jq '.statistics.total_exercations' $outfile)
        total_succeeds=$(jq '.statistics.total_succeeds' $outfile)
        github_user="${{ github.actor }}"

        # 生成新的 JSON 内容
        new_json=$(jq -n \
          --arg channel "github" \
          --argjson courseId 1698 \
          --arg ext "aaa" \
          --arg name "$github_user" \
          --argjson score "$total_succeeds" \
          --argjson totalScore "$total_exercations" \
          '{channel: $channel, courseId: $courseId, ext: $ext, name: $name, score: $score, totalScore: $totalScore}')

        # 保存新的 JSON 文件
        echo "$new_json" > $summary_file

        # 打印新的 JSON 文件到终端
        cat $summary_file

    - name: Post summary JSON to remote API
      run: |
        summary_file=".github/result/rustlings_summary.json"

        # 发送 POST 请求
        curl -X POST "https://api.learningcamp.cn/web/api/courseRank/createByThird" \
          -H "accept: application/json;charset=utf-8" \
          -H "Content-Type: application/json" \
          -d "$(cat $summary_file)" \
          -v

  cxx:
    name: C++ Autograding
    needs: initialize
    if: ${{ needs.initialize.outputs.run_cxx == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'true'
    - name: Install xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: latest
    - name: Run tests and save output
      run: |
        (xmake && xmake run summary) | tee test_output.txt
      working-directory: learning-cxx
      continue-on-error: true
    - name: Parse test results and generate JSON for C++
      run: |
        outfile="./../.github/result/cxx_result.json"
        
        # 初始化统计信息
        total_exercises=0
        total_succeeds=0
        total_failures=0
        start_time=$(date +%s)
        
        # 初始化JSON 开始部分
        echo '{
          "exercises": [' > $outfile

        # 解析测试输出
        while IFS= read -r line; do
          if [[ "$line" == *"testing"* ]]; then
            exercise_name=$(echo $line | cut -d' ' -f1)
            result="false"
          elif [[ "$line" == *"passed"* ]]; then
            result="true"
            total_succeeds=$((total_succeeds + 1))
            total_exercises=$((total_exercises + 1))
          elif [[ "$line" == *"failed"* ]]; then
            total_failures=$((total_failures + 1))
            total_exercises=$((total_exercises + 1))
          else
            continue
          fi
          
          # 添加练习结果到JSON文件
          echo '    {
              "name": "'$exercise_name'",
              "result": '$result'
            },' >> $outfile
        done < learn-cxx/test_output.txt

        # 结束时间
        end_time=$(date +%s)
        total_time=$((end_time - start_time))

        # 去掉最后一个逗号
        sed -i '$ s/,$//' $outfile

        # 添加JSON 结束部分
        echo '  ],
          "user_name": "'${{ github.actor }}'",
          "statistics": {
            "total_exercations": '$total_exercises',
            "total_succeeds": '$total_succeeds',
            "total_failures": '$total_failures',
            "total_time": '$total_time'
          }
        }' >> $outfile
      working-directory: learning-cxx
      continue-on-error: true
    - uses: yfblock/os-autograding@master
      id: autograding
      with:
        outputFile: .github/result/cxx_result.json
    - name: Generate summary JSON for CXX
      run: |
        outfile=".github/result/cxx_result.json"
        summary_file=".github/result/cxx_summary.json"

        # 提取需要的值
        total_exercations=$(jq '.statistics.total_exercations' $outfile)
        total_succeeds=$(jq '.statistics.total_succeeds' $outfile)
        github_user="${{ github.actor }}"

        # 生成新的 JSON 内容
        new_json=$(jq -n \
          --arg channel "github" \
          --argjson courseId 1698 \
          --arg ext "aaa" \
          --arg name "$github_user" \
          --argjson score "$total_succeeds" \
          --argjson totalScore "$total_exercations" \
          '{channel: $channel, courseId: $courseId, ext: $ext, name: $name, score: $score, totalScore: $totalScore}')

        # 保存新的 JSON 文件
        echo "$new_json" > $summary_file

        # 打印新的 JSON 文件到终端
        cat $summary_file

    - name: Post summary JSON to remote API
      run: |
        summary_file=".github/result/cxx_summary.json"

        # 发送 POST 请求
        curl -X POST "https://api.learningcamp.cn/web/api/courseRank/createByThird" \
          -H "accept: application/json;charset=utf-8" \
          -H "Content-Type: application/json" \
          -d "$(cat $summary_file)" \
          -v
